[
  {
    "objectID": "presentations.html",
    "href": "presentations.html",
    "title": "{{ title }}",
    "section": "",
    "text": "{{ title }}\nContent goes here."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "{{ title }}",
    "section": "",
    "text": "{{ title }}\nContent goes here."
  },
  {
    "objectID": "talks.html",
    "href": "talks.html",
    "title": "{{ title }}",
    "section": "",
    "text": "{{ title }}\nContent goes here."
  },
  {
    "objectID": "posts/titiler-intro/index.html",
    "href": "posts/titiler-intro/index.html",
    "title": "Getting started with TiTiler",
    "section": "",
    "text": "TiTiler is a modern map tile server that helps developers quickly serve geospatial data on the web. Think of it as a specialized tool that takes large geographic files (like satellite imagery) and slices them into small, web-friendly map tiles that load efficiently in browser-based maps.\nBuilt on FastAPI, TiTiler makes working with Cloud-Optimized GeoTIFFs, Spatio Temporal Asset Catalog and other spatial data formats straightforward, even if you‚Äôre not a GIS expert. It handles all the complex work of processing geographic data and serving it through simple API endpoints that any web developer can use.\nIn the past, putting maps on websites was a real pain. Developers had to use bulky tools like GeoServer that were hard to set up, or spend hours making thousands of static tiny map images with tools like gdal2tiles that couldn‚Äôt be changed later. TiTiler makes this so much easier. It creates dynamic map pieces right when you need them, instead of making them all beforehand. It works great with modern cloud data and doesn‚Äôt need complicated setup. This means less headache and more time to focus on building cool map features that users will love."
  },
  {
    "objectID": "posts/titiler-intro/index.html#section",
    "href": "posts/titiler-intro/index.html#section",
    "title": "Getting started with TiTiler",
    "section": "",
    "text": "TiTiler is a modern map tile server that helps developers quickly serve geospatial data on the web. Think of it as a specialized tool that takes large geographic files (like satellite imagery) and slices them into small, web-friendly map tiles that load efficiently in browser-based maps.\nBuilt on FastAPI, TiTiler makes working with Cloud-Optimized GeoTIFFs, Spatio Temporal Asset Catalog and other spatial data formats straightforward, even if you‚Äôre not a GIS expert. It handles all the complex work of processing geographic data and serving it through simple API endpoints that any web developer can use.\nIn the past, putting maps on websites was a real pain. Developers had to use bulky tools like GeoServer that were hard to set up, or spend hours making thousands of static tiny map images with tools like gdal2tiles that couldn‚Äôt be changed later. TiTiler makes this so much easier. It creates dynamic map pieces right when you need them, instead of making them all beforehand. It works great with modern cloud data and doesn‚Äôt need complicated setup. This means less headache and more time to focus on building cool map features that users will love."
  },
  {
    "objectID": "posts/titiler-intro/index.html#dynamic-vs.-static-tiles-whats-the-difference",
    "href": "posts/titiler-intro/index.html#dynamic-vs.-static-tiles-whats-the-difference",
    "title": "Getting started with TiTiler",
    "section": "Dynamic vs.¬†Static Tiles: What‚Äôs the Difference?",
    "text": "Dynamic vs.¬†Static Tiles: What‚Äôs the Difference?\nStatic tiles are like pre-printed map pieces stored in folders. Once created, they‚Äôre locked‚Äîchanging anything means starting over. They use lots of storage but load quickly.\nTiTiler‚Äôs dynamic tiles work like a chef cooking to order. When someone views your map, TiTiler grabs just the data needed and creates tiles on the spot. This lets you instantly change colors, adjust contrast, or highlight different features. Your map becomes flexible and responsive, adapting to what users need right now rather than being stuck with choices made earlier."
  },
  {
    "objectID": "posts/titiler-intro/index.html#lets-get-titiler-up-and-running",
    "href": "posts/titiler-intro/index.html#lets-get-titiler-up-and-running",
    "title": "Getting started with TiTiler",
    "section": "Let‚Äôs Get TiTiler Up and Running!",
    "text": "Let‚Äôs Get TiTiler Up and Running!\nNow that we understand the advantage of TiTiler‚Äôs dynamic approach, let‚Äôs get it running on your local machine. Follow these steps:\n\n1. Create Your Project Workspace\nFirst, let‚Äôs create a dedicated space for our TiTiler project. Open your terminal (Command Prompt or PowerShell on Windows, Terminal on macOS/Linux) and run:\n# Works on all operating systems\nmkdir Titiler\ncd Titiler\n\nüí° Pro Tip: Keeping your TiTiler project in its own folder makes it easier to manage and prevents conflicts with other Python projects.\n\n\n\n2. Set Up a Python Virtual Environment\n\nCreate the virtual environment:\npython -m venv titiler\nActivate the virtual environment:\n\nFor Linux/macOS:\nsource titiler/bin/activate\nFor Windows:\ntitiler\\Scripts\\activate\n\n\n\n\n3. Install TiTiler and Its Dependencies\nWith your environment activated, install TiTiler and the web server it needs:\npip install titiler.core uvicorn\nThis command installs the core TiTiler package and Uvicorn, a lightning-fast ASGI server.\n\nüí° What‚Äôs happening: TiTiler.core contains the essential functionality for serving map tiles. Uvicorn is the engine that will run our FastAPI application.\n\n\n\n4. Create Your TiTiler Application\nNow for the fun part! Create a file named main.py with the following code:\nfrom fastapi import FastAPI\nfrom titiler.core.factory import TilerFactory\n\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\n# Add CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Allows all origins (for development - be more specific in production)\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Create a TilerFactory for Cloud-Optimized GeoTIFFs\ncog = TilerFactory()\n\n# Register all the COG endpoints automatically\napp.include_router(cog.router, tags=[\"Cloud Optimized GeoTIFF\"])\n\n\n# Optional: Add a welcome message for the root endpoint\n@app.get(\"/\")\ndef read_index():\n    return {\"message\": \"Welcome to TiTiler\"}\n\nüí° Code Breakdown:\n\nWe create a FastAPI app and add CORS middleware to allow web maps to access our images\nThe TilerFactory() creates all the endpoints needed for serving COG tiles\nWe include those endpoints in our app with app.include_router()\nA simple home endpoint provides a welcome message\n\n\n\n\n5. Launch Your TiTiler Server\nRun the following command to start the server:\nuvicorn main:app --reload\nYou should see output similar to this:\n\n\nüí° The --reload flag automatically restarts the server whenever you change your code - perfect for development!\n\n\n\n6. Explore Your TiTiler API\nOpen your browser and go to:\nhttp://127.0.0.1:8000/ - See your welcome message\n\nhttp://127.0.0.1:8000/docs - Explore the interactive API documentation. The /docs page is your mission control center. It shows all the endpoints TiTiler created for you and lets you test them directly in your browser:"
  },
  {
    "objectID": "posts/titiler-intro/index.html#visualizing-your-geospatial-data",
    "href": "posts/titiler-intro/index.html#visualizing-your-geospatial-data",
    "title": "Getting started with TiTiler",
    "section": "Visualizing Your Geospatial Data",
    "text": "Visualizing Your Geospatial Data\nNow that your server is running, let‚Äôs see what it can do with real data!\n\nQuick Preview of Your Raster\nTo get a quick preview of any Cloud-Optimized GeoTIFF, use:\nhttp://127.0.0.1:8000/preview?url=file:///path_to_your_raster.tif\n\n‚ö†Ô∏è Note: Replace the path with the actual path to your COG file. Remember to use the full path for local files."
  },
  {
    "objectID": "posts/titiler-intro/index.html#visualizing-a-specific-tile-z-x-y",
    "href": "posts/titiler-intro/index.html#visualizing-a-specific-tile-z-x-y",
    "title": "Getting started with TiTiler",
    "section": "Visualizing a Specific Tile (Z, X, Y)",
    "text": "Visualizing a Specific Tile (Z, X, Y)\nWhen working with web maps, understanding tile coordinates is essential. Let‚Äôs break down what Z, X, Y values mean:\n\nZ (zoom level): How far in/out you‚Äôre zoomed. Lower numbers (0-5) show the whole world with less detail; higher numbers (15-22) show smaller areas with more detail.\nX (column): Horizontal position, increasing eastward.\nY (row): Vertical position, increasing southward.\n\nAt zoom level 0, there‚Äôs just 1 tile for the whole world. Each zoom level increase splits each tile into 4 more detailed tiles.\n\nWhy Visualize Specific Tiles?\n\nPerformance: Load only what users can see\nDebugging: Inspect problematic tiles\nSpecific Analysis: Extract data from exact locations\n\n\n\nFinding Z, X, Y for Your Image\nThe mercantile library makes this straightforward:\nimport mercantile\nimport rasterio\n\n# Open your GeoTIFF file\nwith rasterio.open('/path/to/your/raster.tif') as src:\n    bbox = src.bounds\n    zoom = 15\n\n    # Find all tiles covering the bounding box\n    tiles = list(mercantile.tiles(bbox[0], bbox[1], bbox[2], bbox[3], zoom))\n\n    for t in tiles:\n        print(\"Tile coordinate (x, y, z):\", t.x, t.y, t.z)\n\n\nViewing a Specific Tile in TiTiler\nFor example, if your tile has coordinates x=5412, y=12463, z=15, you would access specific tile with:\nhttp://127.0.0.1:8000/tiles/WebMercatorQuad/15/5412/12463.png?url=raster.tif\nURL components explained:\n\nWebMercatorQuad/: The tiling scheme (this should match your raster‚Äôs CRS - TiTiler will reproject on-the-fly if needed, but using the correct scheme improves performance and accuracy)\n{z}/{x}/{y}: Your tile coordinates\n.png: Output format (alternatives: .jpg, .webp, .tif)\n?url=raster.tif: Source raster file\n\n\n\nCreating a Web Map with Leaflet\nLeaflet is a lightweight, open-source JavaScript library for interactive maps. It lets you combine base maps (like OpenStreetMap) with overlays from custom tile servers such as TiTiler.\nThe following code (in map.html) loads a base map, adds your TiTiler raster overlay, and automatically sets the map‚Äôs view to the raster‚Äôs bounds:\n\nmap.html Code:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Leaflet Basemap + TiTiler Raster Overlay&lt;/title&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"initial-scale=1.0\"&gt;\n  &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" /&gt;\n  &lt;script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"map\" style=\"width: 100%; height: 600px;\"&gt;&lt;/div&gt;\n  &lt;script&gt;\n    // Initialize the map with OpenStreetMap as the basemap\n    var map = L.map('map').setView([0, 0], 2);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 19,\n      attribution: '&copy; OpenStreetMap contributors'\n    }).addTo(map);\n\n    /// Define the local raster path and TiTiler endpoint\n    // Replace with your own full GeoTIFF path - use the appropriate format for your OS.\n    var rasterPath = 'file:///path_to_your_raster.tif';\n    var titilerUrl = 'http://127.0.0.1:8000/tiles/WebMercatorQuad/{z}/{x}/{y}.png?url=' + encodeURIComponent(rasterPath);\n\n    // Add the TiTiler raster overlay with some transparency\n    L.tileLayer(titilerUrl, {\n      tileSize: 256,\n      opacity: 0.7,\n      maxZoom: 22\n    }).addTo(map);\n\n    // Fetch the raster's bounding box from TiTiler and adjust the map view accordingly\n    var boundsUrl = 'http://127.0.0.1:8000/bounds?url=' + encodeURIComponent(rasterPath);\n    console.log(boundsUrl)\n    fetch(boundsUrl)\n      .then(response =&gt; response.json())\n      .then(data =&gt; {\n        console.log(\"Bounds data:\", data);\n        if (data && data.bounds) {\n          // data.bounds is [minX, minY, maxX, maxY]\n          var b = data.bounds;\n          // Convert to Leaflet bounds: [[southWest_lat, southWest_lng], [northEast_lat, northEast_lng]]\n          var leafletBounds = [[b[1], b[0]], [b[3], b[2]]];\n          map.fitBounds(leafletBounds);\n        } else {\n          console.error(\"No bounds returned from TiTiler.\");\n        }\n      })\n      .catch(error =&gt; console.error(\"Error fetching bounds:\", error));\n\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;"
  },
  {
    "objectID": "posts/titiler-intro/index.html#troubleshooting-common-issues",
    "href": "posts/titiler-intro/index.html#troubleshooting-common-issues",
    "title": "Getting started with TiTiler",
    "section": "Troubleshooting Common Issues",
    "text": "Troubleshooting Common Issues\n\nCORS Issues\nIf you encounter ‚ÄúAccess to fetch at X has been blocked by CORS policy‚Äù errors in your browser console, make sure you:\n\nHave included the CORS middleware in main.py as shown above\nRestart your TiTiler server after making changes\n\n\n\nFile Not Found Errors\nWhen using file:/// URLs: - Make sure to use the absolute path to your file with the correct format for your operating system:\n\nWindows: file:///C:/Users/username/data/image.tif\nmacOS: file:///Users/username/data/image.tif\nLinux: file:///home/username/data/image.tif\n\n\n\nNo Tiles Showing\nIf your map loads but your tiles don‚Äôt appear:\n\nCheck the browser console for errors\nVerify that your GeoTIFF is Cloud-Optimized (use rio cogeo validate from the rio-cogeo package)\nTry different zoom levels - your data might not be visible at all scales"
  },
  {
    "objectID": "posts/titiler-intro/index.html#whats-next",
    "href": "posts/titiler-intro/index.html#whats-next",
    "title": "Getting started with TiTiler",
    "section": "What‚Äôs Next?",
    "text": "What‚Äôs Next?\nOnce you‚Äôve got the basics working, you can explore TiTiler‚Äôs more advanced features:\n\nCustom colormaps and visualization settings\nSupport for other formats like MosaicJSON and STAC\nTile caching for improved performance"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Blog Posts",
    "section": "",
    "text": "Getting started with TiTiler\n\n\n\n\n\n\nWeb GIS\n\n\nRaster Data Visualization\n\n\n\nA guide to using TiTiler for geospatial data visualization. Discover how to serve Cloud-Optimized GeoTIFFs through simple API endpoints for interactive web maps\n\n\n\n\n\n17 Mar 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "events.html",
    "href": "events.html",
    "title": "{{ title }}",
    "section": "",
    "text": "{{ title }}\nContent goes here."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dimple Jain",
    "section": "",
    "text": "Geospatial Engineer at Pixxel, working with hyperspectral imagery, geospatial data processing, and automation, while bridging the gap between software engineering and geospatial solutions.\nBackground in Geography & Geoinformatics, with hands-on experience in software development, satellite data analysis, and scalable geospatial systems.\nPassionate about open-source geospatial technologies, automation, and building scalable geospatial solutions.\nI‚Äôve presented at open-source conferences like FOSS4G 2023 on Open Data for Geospatial and FOSS4G Asia Seoul on PyQGIS.\nI also presented at QGIS Open Day Jan 2023 and attended STAC Sprint 2023 in the USA, where I began contributing to open-source projects by writing documentation on STAC tutorial.\n\n\n\nPixxel | Geospatial Engineer | June 2020 ‚Äì Present\nQuantela | Spatial Data Science Intern | Dec 2019 ‚Äì June 2020"
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Dimple Jain",
    "section": "",
    "text": "Geospatial Engineer at Pixxel, working with hyperspectral imagery, geospatial data processing, and automation, while bridging the gap between software engineering and geospatial solutions.\nBackground in Geography & Geoinformatics, with hands-on experience in software development, satellite data analysis, and scalable geospatial systems.\nPassionate about open-source geospatial technologies, automation, and building scalable geospatial solutions.\nI‚Äôve presented at open-source conferences like FOSS4G 2023 on Open Data for Geospatial and FOSS4G Asia Seoul on PyQGIS.\nI also presented at QGIS Open Day Jan 2023 and attended STAC Sprint 2023 in the USA, where I began contributing to open-source projects by writing documentation on STAC tutorial."
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Dimple Jain",
    "section": "",
    "text": "Pixxel | Geospatial Engineer | June 2020 ‚Äì Present\nQuantela | Spatial Data Science Intern | Dec 2019 ‚Äì June 2020"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "{{ title }}",
    "section": "",
    "text": "{{ title }}\nContent goes here."
  }
]